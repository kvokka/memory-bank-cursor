---
description: MUST USE when memory_bank_status is active or loading
globs:
alwaysApply: false
---
# Memory Bank

## Progress

This rule standardizes task numbering in progress.md and implements dynamic task granularity based on work status.

<thinking>
This rule now combines two key aspects: (1) how to number tasks consistently and (2) when to split tasks into subtasks vs. keep them high-level. The combination makes logical sense as both relate to task management in progress.md
</thinking>

## Task Numbering Format

- Format: `X0000` where:
  - `X` = task type letter (see table below)
  - `0000` = sequential number (0001, 0002...)
- Subtasks: `X0000.1`, `X0000.1.1`, etc.
- Task number must be unique
- Numbering is continuous across all task types

### Task Type Prefixes

| Prefix | Task Type            | Examples                                    |
|--------|----------------------|---------------------------------------------|
| C      | Code implementation  | Engine, UI, gameplay features               |
| T      | Testing              | Unit tests, integration tests, QA           |
| D      | Design               | Visual design, UX, architecture diagrams    |
| R      | Research             | Tech evaluation, competitive analysis       |
| S      | Setup                | Environment, tools, configuration           |
| O      | Optimization         | Performance, memory, loading time           |
| A      | Asset creation       | Graphics, sounds, models                    |
| P      | Project management   | Planning, documentation, coordination       |
| M      | Maintenance          | Refactoring, bug fixes, technical debt      |

## Task Granularity Management

<thinking>
This section introduces the dynamic granularity concept - keeping most tasks high-level while only elaborating on active tasks. This reduces clutter and focuses attention where needed.
</thinking>

**Core Principle**: Only active tasks should be split into detailed subtasks.

1. **High-level tasks** (for upcoming, planned, or completed work):

   ```markdown
   - ⬜ [C0042] Implement shooting mechanics
   ```

2. **Active tasks** (currently being worked on):

   ```markdown
   - ⬜ [C0042] Implement shooting mechanics
     - ⬜ [C0042.1] Create projectile entity
     - ⬜ [C0042.2] Implement firing controls
     - ⬜ [C0042.3] Add collision detection
   ```

## Task Lifecycle

### Starting a Task

1. Check for uncommitted changes
2. Mark task as in-progress in progress.md
3. Split into detailed subtasks with hierarchical numbering
4. Include implementation steps and acceptance criteria if applicable

### Completing a Task

All steps below are **ABSOLUTELY MANDATORY**

1. Update status from ⬜ to ✅ for the task when all subtasks are finished
2. Consider collapsing detailed subtasks into a summary
3. Move to the appropriate section (e.g., Completed Tasks)

## Implementation Flow

<thinking>
This section integrates the workflow concepts from both files into a single coherent process. Consider if there should be more explicit triggers for task granularity changes.
</thinking>

On Memory Bank activation or task status change:

- For tasks starting work:
  - Split into detailed subtasks
  - Add specific implementation steps
- For tasks no longer in progress:
  - Consider collapsing subtasks
  - Move to appropriate section
- For all other tasks:
  - Keep at high level
  - Use single-line entries

## Examples

### Valid Task Numbering

```markdown
- ✅ [S0001] Set up development environment
- ⬜ [T0003] Set up Jest testing framework # Missed number is ok
- ⬜ [D0005] Design maze layout  # Non-active task kept high-level
```

### Invalid Examples

```markdown
- ⬜ Set up environment  # Missing task number
- ⬜ [S-1] Configure TypeScript  # Incorrect format
- ⬜ [T3] Set up Jest  # Missing leading zeros
- ⬜ [T3] Set up Zod  # Not unique
- ⬜ [C0004] [C0005] Implement canvas manager  # Multiple numbers
```
