---
description: MUST USE when the memory_bank_status is (inactive or loading) AND (user requests memory bank initialization OR task is complex)
globs:
alwaysApply: false
---
# Memory Bank

## Init

Creates the Memory Bank structure

## Implementation

Check `memory_bank_status`.

- If 'loading': Ask user confirmation, mentioning that you are going to remove
  `memory-bank/` folder, and after confirmation received remove `memory-bank/`
  folder completely and set `memory_bank_status` to 'inactive', then continue.
- If 'active': Stop.
- If 'inactive': Continue.

Ask user: "Initialize Memory Bank?"

- If No: Stop.
- If Yes: Continue.

Set `memory_bank_status` = 'loading'.

This steps are ABSOLUTELY REQUIRED for Memory Bank functionality. Execute all bullets sequentially:

- Scan `<available_instructions>` section for ALL not loaded rules containing "memory-bank", excluding "memory-bank/init"
- Use `fetch_rules(["{rule_name}"])` for EACH such rule
- Explicitly confirm with: `[âœ“ All memory bank rules loaded]`

Check if `memory-bank/projectBrief.md` exists.

- If Yes: read its content.
- If No: create `memory-bank/projectBrief.md`, populating it with a summary derived from conversation history and context.
- Store the content (read or created) as `briefContext`.

Create `memory-bank/` directory if needed. Then, create the following files **only if they do not already exist**, populating relevant sections using `briefContext`:

- `memory-bank/productContext.md` (Use `briefContext` for Goal, Features, Architecture)
- `memory-bank/activeContext.md`
- `memory-bank/progress.md`
- `memory-bank/decisionLog.md`
- `memory-bank/systemPatterns.md` (Optional, use `briefContext` if relevant)
- `memory-bank/techContext.md` (Use `briefContext` for Technologies, Setup, Constraints, Dependencies)

*(Note: Use simplified templates below, remove repetitive population notes)*

- `memory-bank/productContext.md`:

  ```md
  # Product Context

  High-level project overview. Initially based on `projectBrief.md`. Update as project evolves.
  YYYY-MM-DD HH:MM:SS - Log updates here.

  ## Project Goal
  * (Populated from briefContext)

  ## Key Features
  * (Populated from briefContext)

  ## Overall Architecture
  * (Populated from briefContext)
  ```

- `memory-bank/activeContext.md`:

  ```md
  # Active Context

  Current status, focus, changes, open questions.
  YYYY-MM-DD HH:MM:SS - Log updates here.

  ## Current Focus
  *

  ## Recent Changes
  *

  ## Open Questions/Issues
  *
  ```

- `memory-bank/progress.md`:

  ```md
  # Progress

  Task tracking: completed, current, next steps.
  YYYY-MM-DD HH:MM:SS - Log updates here.

  ## Completed Tasks
  *

  ## Current Tasks
  *

  ## Next Steps
  *
  ```

- `memory-bank/decisionLog.md`:

  ```md
  # Decision Log

  Record of decisions, rationale, implementation details.
  YYYY-MM-DD HH:MM:SS - Log updates here.

  ## Decision
  *

  ## Rationale
  *

  ## Implementation Details
  *
  ```

- `memory-bank/systemPatterns.md`:

  ```md
  # System Patterns *Optional*

  Recurring patterns/standards (coding, architecture, testing).
  YYYY-MM-DD HH:MM:SS - Log updates here.

  ## Coding Patterns
  * (Populated from briefContext if relevant)

  ## Architectural Patterns
  * (Populated from briefContext if relevant)

  ## Testing Patterns
  * (Populated from briefContext if relevant)
  ```

- `memory-bank/techContext.md`:

  ```md
  # Technical Context

  Technologies, setup, constraints, dependencies. Initially based on `briefContext`.
  YYYY-MM-DD HH:MM:SS - Log updates here.

  ## Core Technologies
  * (Populated from briefContext)

  ## Development Environment Setup
  * (Populated from briefContext)

  ## Technical Constraints/Decisions
  * (Populated from briefContext)

  ## Key Dependencies
  * (Populated from briefContext)
  ```

Set `memory_bank_status` = 'active'.

## File Templates (Summary)

- **productContext.md**: Project goals, features, architecture
- **activeContext.md**: Current focus, recent changes, open questions
- **progress.md**: Completed/current/next tasks
- **decisionLog.md**: Decisions with rationale
- **systemPatterns.md**: Coding/architectural/testing patterns
- **techContext.md**: Technologies, setup, constraints, dependencies
